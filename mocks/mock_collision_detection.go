// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juliabiro/gogorilla/sprites (interfaces: CollisionDetection)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCollisionDetection is a mock of CollisionDetection interface
type MockCollisionDetection struct {
	ctrl     *gomock.Controller
	recorder *MockCollisionDetectionMockRecorder
}

// MockCollisionDetectionMockRecorder is the mock recorder for MockCollisionDetection
type MockCollisionDetectionMockRecorder struct {
	mock *MockCollisionDetection
}

// NewMockCollisionDetection creates a new mock instance
func NewMockCollisionDetection(ctrl *gomock.Controller) *MockCollisionDetection {
	mock := &MockCollisionDetection{ctrl: ctrl}
	mock.recorder = &MockCollisionDetectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollisionDetection) EXPECT() *MockCollisionDetectionMockRecorder {
	return m.recorder
}

// Center mocks base method
func (m *MockCollisionDetection) Center() (float64, float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Center")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// Center indicates an expected call of Center
func (mr *MockCollisionDetectionMockRecorder) Center() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Center", reflect.TypeOf((*MockCollisionDetection)(nil).Center))
}

// IsInside mocks base method
func (m *MockCollisionDetection) IsInside(arg0, arg1 float64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInside", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInside indicates an expected call of IsInside
func (mr *MockCollisionDetectionMockRecorder) IsInside(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInside", reflect.TypeOf((*MockCollisionDetection)(nil).IsInside), arg0, arg1)
}
