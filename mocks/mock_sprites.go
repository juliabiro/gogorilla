// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juliabiro/gogorilla/sprites (interfaces: Drawable)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	ebiten "github.com/hajimehoshi/ebiten"
	reflect "reflect"
)

// MockDrawable is a mock of Drawable interface
type MockDrawable struct {
	ctrl     *gomock.Controller
	recorder *MockDrawableMockRecorder
}

// MockDrawableMockRecorder is the mock recorder for MockDrawable
type MockDrawableMockRecorder struct {
	mock *MockDrawable
}

// NewMockDrawable creates a new mock instance
func NewMockDrawable(ctrl *gomock.Controller) *MockDrawable {
	mock := &MockDrawable{ctrl: ctrl}
	mock.recorder = &MockDrawableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDrawable) EXPECT() *MockDrawableMockRecorder {
	return m.recorder
}

// DrawingParameters mocks base method
func (m *MockDrawable) DrawingParameters() (*ebiten.Image, *ebiten.DrawImageOptions) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawingParameters")
	ret0, _ := ret[0].(*ebiten.Image)
	ret1, _ := ret[1].(*ebiten.DrawImageOptions)
	return ret0, ret1
}

// DrawingParameters indicates an expected call of DrawingParameters
func (mr *MockDrawableMockRecorder) DrawingParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawingParameters", reflect.TypeOf((*MockDrawable)(nil).DrawingParameters))
}

// SetImage mocks base method
func (m *MockDrawable) SetImage(arg0 *ebiten.Image) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetImage", arg0)
}

// SetImage indicates an expected call of SetImage
func (mr *MockDrawableMockRecorder) SetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImage", reflect.TypeOf((*MockDrawable)(nil).SetImage), arg0)
}
